services:
  cartasdb:
    image: postgres
    container_name: cartas_postgres
    environment:
      - POSTGRES_DB=ApiCartasDB
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=12345
    ports:
      - 5432:5432
    volumes:
      - cartas-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  barajasdb:
    image: postgres
    container_name: barajas_postgres
    environment:
      - POSTGRES_DB=ApibarajasDB
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=12345
    ports:
      - 5433:5432
    volumes:
      - barajas-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  cartasservices:
    build:
      context: ./src/CartasService
    container_name: cartasservice
    depends_on:
      cartasdb:
       condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=cartasdb;Port=5432;Database=ApiCartasDB;Username=postgres;Password=12345
    ports:
      - "8003:8080"
  barajasservices:
    build:
      context: ./src/BarajaService
    container_name: barajasservice
    depends_on:
      barajasdb:
       condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=barajasdb;Port=5432;Database=ApibarajasDB;Username=postgres;Password=12345
    ports:
      - "8004:8080"
  apigateway:
    build: 
      context: ./src/GatewayService
    container_name: apigateway
    depends_on:
      - cartasservices
      - barajasservices
    ports:
      - "8002:8080"

volumes:
  cartas-data:
  barajas-data: